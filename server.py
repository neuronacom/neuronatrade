import os
import requests
from flask import Flask, jsonify, request
from flask_cors import CORS

BINANCE_API_KEY = os.environ.get("BINANCE_API_KEY")
CRYPTOPANIC_API_KEY = os.environ.get("CRYPTOPANIC_API_KEY")
OPENAI_API_KEY = os.environ.get("OPENAI_API_KEY")

app = Flask(__name__)
CORS(app)

def fetch_btc_signal():
    # –ó–¥–µ—Å—å –±–µ—Ä—ë–º —Å Binance —Å—Ç–∞–∫–∞–Ω, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º, –≤—ã–±–∏—Ä–∞–µ–º —Å–∏–≥–Ω–∞–ª (–ø—Ä–∏–º–µ—Ä)
    ticker = requests.get("https://api.binance.com/api/v3/ticker/bookTicker?symbol=BTCUSDT").json()
    price = float(ticker['bidPrice'])
    # –≠–º—É–ª–∏—Ä—É–µ–º: –µ—Å–ª–∏ —Ü–µ–Ω–∞ > X ‚Äî –ª–æ–Ω–≥, < X ‚Äî —à–æ—Ä—Ç, –¥–∞–ª—å—à–µ –ª—É—á—à–µ –¥–µ–ª–∞—Ç—å –ø–æ-–Ω–∞—Å—Ç–æ—è—â–µ–º—É
    if price > 60000:
        return {
            "type": "signal",
            "text": f"<b>BTC/USDT LONG</b> (–û–±—ä—ë–º—ã —Ä–∞—Å—Ç—É—Ç)\n–í—Ö–æ–¥: <b>{int(price)}</b><br>–¢–µ–π–∫: <b>{int(price*1.01)}</b><br>–°—Ç–æ–ø: <b>{int(price*0.995)}</b>"
        }
    else:
        return {
            "type": "signal",
            "text": f"<b>BTC/USDT SHORT</b> (–û–±—ä—ë–º—ã –ø–∞–¥–∞—é—Ç)\n–í—Ö–æ–¥: <b>{int(price)}</b><br>–¢–µ–π–∫: <b>{int(price*0.985)}</b><br>–°—Ç–æ–ø: <b>{int(price*1.006)}</b>"
        }

def fetch_news():
    url = f"https://cryptopanic.com/api/v1/posts/?auth_token={CRYPTOPANIC_API_KEY}&currencies=BTC&filter=important"
    news = []
    try:
        resp = requests.get(url).json()
        for n in resp.get('results', [])[:3]:
            news.append({
                "type": "news",
                "text": f"üì∞ <b>{n.get('title','')}</b> <a href='{n.get('url','')}' target='_blank'>–ò—Å—Ç–æ—á–Ω–∏–∫</a>"
            })
    except Exception as e:
        pass
    return news

@app.route("/api/feed")
def api_feed():
    result = []
    result.append(fetch_btc_signal())
    result += fetch_news()
    return jsonify({"messages": result})

# ----- –î–ª—è Push (–ø–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –ø–æ—Ç–æ–º —Ä–∞—Å—Å—ã–ª–∫–∞ —á–µ—Ä–µ–∑ web-push) -----
# –ü–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ (–Ω–æ –≤—Å—ë –≥–æ—Ç–æ–≤–æ ‚Äî –µ—Å–ª–∏ –Ω—É–∂–µ–Ω –∫–æ–¥ –¥–ª—è webpush, –¥–∞–π –∑–Ω–∞—Ç—å)
# –¢—É—Ç —Ñ—Ä–æ–Ω—Ç –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ ServiceWorker, –∞ —Å–µ—Ä–≤–µ—Ä —Ö—Ä–∞–Ω–∏—Ç endpoint'—ã –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))
